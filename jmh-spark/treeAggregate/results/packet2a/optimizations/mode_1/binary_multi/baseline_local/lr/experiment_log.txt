Wed Dec  6 22:56:39 UTC 2017
[95m===============================================
Starting experiment: /home/hibench-output/baseline_local
================================================[97m
my ip:
147.75.202.66
end
[95m===============================================
Restarting Spark Master @ 147.75.202.66:7077
================================================[97m
Wed Dec  6 22:56:41 UTC 2017
Wed Dec  6 22:57:58 UTC 2017
[95m===============================================
To check the webUI to see the spark master,
  run the following: ssh -L 8080:localhost:8080 root@147.75.202.66
  then do following: xdg-open 147.75.202.66:8080
================================================[97m
[95m===============================================
Preparing for LR example, input size 150000 features....
================================================[97m
Wed Dec  6 22:58:12 UTC 2017
patching args=
start LogisticRegressionDataPrepare bench
Export env: SPARKBENCH_PROPERTIES_FILES=/CMC/kmiecseb/HiBench/report/lr/prepare/conf/sparkbench/sparkbench.conf
LIBJARS: 
JAR: /CMC/kmiecseb/HiBench/sparkbench/assembly/target/sparkbench-assembly-6.1-SNAPSHOT-dist.jar
args: hdfs://localhost:9000/HiBench/LR/Input 10000 150000
!!!!-----README-----!!!
Submit Spark job: /CMC/kmiecseb/spark/bin/spark-submit  --properties-file /CMC/kmiecseb/HiBench/report/lr/prepare/conf/sparkbench/spark.conf --class com.intel.hibench.sparkbench.ml.LogisticRegressionDataGenerator --master spark://147.75.202.66:7077  /CMC/kmiecseb/HiBench/sparkbench/assembly/target/sparkbench-assembly-6.1-SNAPSHOT-dist.jar hdfs://localhost:9000/HiBench/LR/Input 10000 150000
Output Path: hdfs://localhost:9000/HiBench/LR/Input
Num of Examples: 10000
Num of Features: 150000
finish LogisticRegressionDataPrepare bench
Wed Dec  6 22:59:18 UTC 2017
[95m=======================
Current settings, abort if wrong.
==========================[39m
ARM_MACHINE=true
YARN_CORES=92
YARN_MEM=112640
USE_YARN_FOR_SPARK_ON_HADOOP=false
SPARK_EXECUTOR_CORES=15
SPARK_EXECUTOR_MEMORY=16g
SPARK_DRIVER_MEMORY=24g
SPARK_WORKER_CORES=90
SPARK_WORKER_MEMORY=122g
SPARK_WORKER_INSTANCES=1
SPARK_EXECUTOR_INSTANCES=6
SPARK_DAEMON_MEMORY=2g
SPARK_DEFAULT_PARALLELISM=30
SPARK_SQL_SHUFFLE_PARTITIONS=30

[95m===================================
Resetting relavent configs
======================================[97m
[95m===============================================
Starting Spark LR example, 150000 features, trial baseline, @ local[*]...
================================================[97m
[91mCHECK to make sure sparkmasters match!!!!!![97m
Wed Dec  6 22:59:22 UTC 2017
# JMH version: 1.19
# VM version: JDK 1.8.0-release, VM 25.71-b00
# VM invoker: /CMC/kmiecseb/jdk8u-server-release-1708/jre/bin/java
# VM options: -Xmx24g
# Warmup: 1 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Binary_LR

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 

(spark.network.timeout,600s)
(spark.master,local[*])
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
105.550 s/op
Iteration   1: 85.435 s/op
Iteration   2: 82.260 s/op
Iteration   3: 84.085 s/op
Iteration   4: 81.805 s/op
Iteration   5: 82.736 s/op


Result "grsm.Benchmarks.Binary_LR":
  N = 5
  mean =     83.264 ?(99.9%) 5.712 s/op

  Histogram, s/op:
    [81.000, 81.500) = 0 
    [81.500, 82.000) = 1 
    [82.000, 82.500) = 1 
    [82.500, 83.000) = 1 
    [83.000, 83.500) = 0 
    [83.500, 84.000) = 0 
    [84.000, 84.500) = 1 
    [84.500, 85.000) = 0 
    [85.000, 85.500) = 1 

  Percentiles, s/op:
      p(0.0000) =     81.805 s/op
     p(50.0000) =     82.736 s/op
     p(90.0000) =     85.435 s/op
     p(95.0000) =     85.435 s/op
     p(99.0000) =     85.435 s/op
     p(99.9000) =     85.435 s/op
     p(99.9900) =     85.435 s/op
     p(99.9990) =     85.435 s/op
     p(99.9999) =     85.435 s/op
    p(100.0000) =     85.435 s/op


# JMH version: 1.19
# VM version: JDK 1.8.0-release, VM 25.71-b00
# VM invoker: /CMC/kmiecseb/jdk8u-server-release-1708/jre/bin/java
# VM options: -Xmx24g
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Binary_LRi_acc

# Run progress: 40.00% complete, ETA 00:13:13
# Fork: 1 of 1
Iteration   1: 

(spark.network.timeout,600s)
(spark.master,local[*])
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
<failure>

org.apache.spark.SparkException: Task not serializable
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:298)
	at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:288)
	at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:108)
	at org.apache.spark.SparkContext.clean(SparkContext.scala:2094)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:370)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:369)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)
	at org.apache.spark.rdd.RDD.map(RDD.scala:369)
	at grsm.Benchmarks.Binary_LRi_acc(driver.scala:116)
	at grsm.generated.Benchmarks_Binary_LRi_acc_jmhTest.Binary_LRi_acc_ss_jmhStub(Benchmarks_Binary_LRi_acc_jmhTest.java:425)
	at grsm.generated.Benchmarks_Binary_LRi_acc_jmhTest.Binary_LRi_acc_SingleShotTime(Benchmarks_Binary_LRi_acc_jmhTest.java:379)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.NotSerializableException: grsm.generated.Benchmarks_My_State_jmhType
Serialization stack:
	- object not serializable (class: grsm.generated.Benchmarks_My_State_jmhType, value: grsm.generated.Benchmarks_My_State_jmhType@3b95ffc3)
	- field (class: grsm.Benchmarks$$anonfun$3, name: s$2, type: class grsm.Benchmarks$My_State)
	- object (class grsm.Benchmarks$$anonfun$3, <function1>)
	at org.apache.spark.serializer.SerializationDebugger$.improveException(SerializationDebugger.scala:40)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:46)
	at org.apache.spark.serializer.JavaSerializerInstance.serialize(JavaSerializer.scala:100)
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:295)
	... 24 more




# JMH version: 1.19
# VM version: JDK 1.8.0-release, VM 25.71-b00
# VM invoker: /CMC/kmiecseb/jdk8u-server-release-1708/jre/bin/java
# VM options: -Xmx24g
# Warmup: 1 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Multinomial_LR

# Run progress: 46.67% complete, ETA 00:12:15
# Fork: 1 of 1
# Warmup Iteration   1: 

(spark.network.timeout,600s)
(spark.master,local[*])
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
530.062 s/op
Iteration   1: 506.321 s/op
Iteration   2: 500.658 s/op
Iteration   3: 511.677 s/op
Iteration   4: 508.017 s/op
Iteration   5: 501.599 s/op


Result "grsm.Benchmarks.Multinomial_LR":
  N = 5
  mean =    505.654 ?(99.9%) 17.616 s/op

  Histogram, s/op:
    [500.000, 501.250) = 1 
    [501.250, 502.500) = 1 
    [502.500, 503.750) = 0 
    [503.750, 505.000) = 0 
    [505.000, 506.250) = 0 
    [506.250, 507.500) = 1 
    [507.500, 508.750) = 1 
    [508.750, 510.000) = 0 
    [510.000, 511.250) = 0 
    [511.250, 512.500) = 1 
    [512.500, 513.750) = 0 
    [513.750, 515.000) = 0 
    [515.000, 516.250) = 0 
    [516.250, 517.500) = 0 
    [517.500, 518.750) = 0 

  Percentiles, s/op:
      p(0.0000) =    500.658 s/op
     p(50.0000) =    506.321 s/op
     p(90.0000) =    511.677 s/op
     p(95.0000) =    511.677 s/op
     p(99.0000) =    511.677 s/op
     p(99.9000) =    511.677 s/op
     p(99.9900) =    511.677 s/op
     p(99.9990) =    511.677 s/op
     p(99.9999) =    511.677 s/op
    p(100.0000) =    511.677 s/op


# JMH version: 1.19
# VM version: JDK 1.8.0-release, VM 25.71-b00
# VM invoker: /CMC/kmiecseb/jdk8u-server-release-1708/jre/bin/java
# VM options: -Xmx24g
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Multinomial_LR_acc

# Run progress: 86.67% complete, ETA 00:09:30
# Fork: 1 of 1
# Warmup Iteration   1: 

(spark.network.timeout,600s)
(spark.master,local[*])
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
<failure>

org.apache.spark.SparkException: Task not serializable
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:298)
	at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:288)
	at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:108)
	at org.apache.spark.SparkContext.clean(SparkContext.scala:2094)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:370)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:369)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)
	at org.apache.spark.rdd.RDD.map(RDD.scala:369)
	at grsm.Benchmarks.Multinomial_LR_acc(driver.scala:97)
	at grsm.generated.Benchmarks_Multinomial_LR_acc_jmhTest.Multinomial_LR_acc_ss_jmhStub(Benchmarks_Multinomial_LR_acc_jmhTest.java:425)
	at grsm.generated.Benchmarks_Multinomial_LR_acc_jmhTest.Multinomial_LR_acc_SingleShotTime(Benchmarks_Multinomial_LR_acc_jmhTest.java:379)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.NotSerializableException: grsm.generated.Benchmarks_My_State_jmhType
Serialization stack:
	- object not serializable (class: grsm.generated.Benchmarks_My_State_jmhType, value: grsm.generated.Benchmarks_My_State_jmhType@4e52c3ad)
	- field (class: grsm.Benchmarks$$anonfun$1, name: s$1, type: class grsm.Benchmarks$My_State)
	- object (class grsm.Benchmarks$$anonfun$1, <function1>)
	at org.apache.spark.serializer.SerializationDebugger$.improveException(SerializationDebugger.scala:40)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:46)
	at org.apache.spark.serializer.JavaSerializerInstance.serialize(JavaSerializer.scala:100)
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:295)
	... 24 more




# Run complete. Total time: 01:10:40

Benchmark                  Mode  Cnt    Score    Error  Units
Benchmarks.Binary_LR         ss    5   83.264 ?  5.712   s/op
Benchmarks.Multinomial_LR    ss    5  505.654 ? 17.616   s/op
Thu Dec  7 00:10:04 UTC 2017
[95m===============================================
Finished Spark LR example.
================================================[97m
Thu Dec  7 00:10:04 UTC 2017
Thu Dec  7 00:10:04 UTC 2017
[95m===============================================
Done experiment.
================================================[97m
