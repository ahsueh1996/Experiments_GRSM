Wed Dec  6 17:16:43 EST 2017
[95m===============================================
Starting experiment: /home/hibench-output/baseline_standalone
================================================[97m
my ip:
142.150.237.146
end
[95m===============================================
Restarting Spark Master @ 142.150.237.146:7077
================================================[97m
Wed Dec  6 17:16:45 EST 2017
Wed Dec  6 17:17:29 EST 2017
[95m===============================================
To check the webUI to see the spark master,
  run the following: ssh -L 8080:localhost:8080 root@142.150.237.146
  then do following: xdg-open 142.150.237.146:8080
================================================[97m
[95m===============================================
Preparing for LR example, input size 150000 features....
================================================[97m
Wed Dec  6 17:17:40 EST 2017
patching args=
start LogisticRegressionDataPrepare bench
Export env: SPARKBENCH_PROPERTIES_FILES=/CMC/kmiecseb/HiBench/report/lr/prepare/conf/sparkbench/sparkbench.conf
LIBJARS: 
JAR: /CMC/kmiecseb/HiBench/sparkbench/assembly/target/sparkbench-assembly-6.1-SNAPSHOT-dist.jar
args: hdfs://localhost:9000/HiBench/LR/Input 10000 150000
!!!!-----README-----!!!
Submit Spark job: /CMC/kmiecseb/spark/bin/spark-submit  --properties-file /CMC/kmiecseb/HiBench/report/lr/prepare/conf/sparkbench/spark.conf --class com.intel.hibench.sparkbench.ml.LogisticRegressionDataGenerator --master spark://142.150.237.146:7077  /CMC/kmiecseb/HiBench/sparkbench/assembly/target/sparkbench-assembly-6.1-SNAPSHOT-dist.jar hdfs://localhost:9000/HiBench/LR/Input 10000 150000
Output Path: hdfs://localhost:9000/HiBench/LR/Input
Num of Examples: 10000
Num of Features: 150000
finish LogisticRegressionDataPrepare bench
Wed Dec  6 17:18:05 EST 2017
[95m=======================
Current settings, abort if wrong.
==========================[39m
ARM_MACHINE=false
YARN_CORES=92
YARN_MEM=112640
USE_YARN_FOR_SPARK_ON_HADOOP=false
SPARK_EXECUTOR_CORES=14
SPARK_EXECUTOR_MEMORY=57g
SPARK_DRIVER_MEMORY=8g
SPARK_WORKER_CORES=30
SPARK_WORKER_MEMORY=122g
SPARK_WORKER_INSTANCES=1
SPARK_EXECUTOR_INSTANCES=2
SPARK_DAEMON_MEMORY=2g
SPARK_DEFAULT_PARALLELISM=30
SPARK_SQL_SHUFFLE_PARTITIONS=30

[95m===================================
Resetting relavent configs
======================================[97m
[95m===============================================
Starting Spark LR example, 150000 features, trial baseline, @ spark://142.150.237.146:7077...
================================================[97m
[91mCHECK to make sure sparkmasters match!!!!!![97m
Wed Dec  6 17:18:08 EST 2017
# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /opt/jdk1.8.0_131/jre/bin/java
# VM options: -Xmx8g
# Warmup: 1 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Binary_LR

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 

(spark.network.timeout,600s)
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
(spark.master,spark://142.150.237.146:7077)
78.469 s/op
Iteration   1: 69.604 s/op
Iteration   2: 75.619 s/op
Iteration   3: 60.410 s/op
Iteration   4: 57.285 s/op
Iteration   5: 57.325 s/op


Result "grsm.Benchmarks.Binary_LR":
  N = 5
  mean =     64.049 Â±(99.9%) 31.573 s/op

  Histogram, s/op:
    [50.000, 52.500) = 0 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 2 
    [57.500, 60.000) = 0 
    [60.000, 62.500) = 1 
    [62.500, 65.000) = 0 
    [65.000, 67.500) = 0 
    [67.500, 70.000) = 1 
    [70.000, 72.500) = 0 
    [72.500, 75.000) = 0 
    [75.000, 77.500) = 1 

  Percentiles, s/op:
      p(0.0000) =     57.285 s/op
     p(50.0000) =     60.410 s/op
     p(90.0000) =     75.619 s/op
     p(95.0000) =     75.619 s/op
     p(99.0000) =     75.619 s/op
     p(99.9000) =     75.619 s/op
     p(99.9900) =     75.619 s/op
     p(99.9990) =     75.619 s/op
     p(99.9999) =     75.619 s/op
    p(100.0000) =     75.619 s/op


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /opt/jdk1.8.0_131/jre/bin/java
# VM options: -Xmx8g
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Binary_LRi_acc

# Run progress: 40.00% complete, ETA 00:10:02
# Fork: 1 of 1
Iteration   1: 

(spark.network.timeout,600s)
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
(spark.master,spark://142.150.237.146:7077)
<failure>

org.apache.spark.SparkException: Task not serializable
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:298)
	at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:288)
	at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:108)
	at org.apache.spark.SparkContext.clean(SparkContext.scala:2094)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:370)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:369)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)
	at org.apache.spark.rdd.RDD.map(RDD.scala:369)
	at grsm.Benchmarks.Binary_LRi_acc(driver.scala:116)
	at grsm.generated.Benchmarks_Binary_LRi_acc_jmhTest.Binary_LRi_acc_ss_jmhStub(Benchmarks_Binary_LRi_acc_jmhTest.java:425)
	at grsm.generated.Benchmarks_Binary_LRi_acc_jmhTest.Binary_LRi_acc_SingleShotTime(Benchmarks_Binary_LRi_acc_jmhTest.java:379)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.NotSerializableException: grsm.generated.Benchmarks_My_State_jmhType
Serialization stack:
	- object not serializable (class: grsm.generated.Benchmarks_My_State_jmhType, value: grsm.generated.Benchmarks_My_State_jmhType@7d86cb6b)
	- field (class: grsm.Benchmarks$$anonfun$3, name: s$2, type: class grsm.Benchmarks$My_State)
	- object (class grsm.Benchmarks$$anonfun$3, <function1>)
	at org.apache.spark.serializer.SerializationDebugger$.improveException(SerializationDebugger.scala:40)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:46)
	at org.apache.spark.serializer.JavaSerializerInstance.serialize(JavaSerializer.scala:100)
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:295)
	... 24 more




# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /opt/jdk1.8.0_131/jre/bin/java
# VM options: -Xmx8g
# Warmup: 1 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Multinomial_LR

# Run progress: 46.67% complete, ETA 00:09:03
# Fork: 1 of 1
# Warmup Iteration   1: 

(spark.network.timeout,600s)
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
(spark.master,spark://142.150.237.146:7077)
222.205 s/op
Iteration   1: 207.907 s/op
Iteration   2: 209.025 s/op
Iteration   3: 207.371 s/op
Iteration   4: 209.212 s/op
Iteration   5: 210.545 s/op


Result "grsm.Benchmarks.Multinomial_LR":
  N = 5
  mean =    208.812 Â±(99.9%) 4.756 s/op

  Histogram, s/op:
    [207.000, 207.250) = 0 
    [207.250, 207.500) = 1 
    [207.500, 207.750) = 0 
    [207.750, 208.000) = 1 
    [208.000, 208.250) = 0 
    [208.250, 208.500) = 0 
    [208.500, 208.750) = 0 
    [208.750, 209.000) = 0 
    [209.000, 209.250) = 2 
    [209.250, 209.500) = 0 
    [209.500, 209.750) = 0 
    [209.750, 210.000) = 0 
    [210.000, 210.250) = 0 
    [210.250, 210.500) = 0 
    [210.500, 210.750) = 1 

  Percentiles, s/op:
      p(0.0000) =    207.371 s/op
     p(50.0000) =    209.025 s/op
     p(90.0000) =    210.545 s/op
     p(95.0000) =    210.545 s/op
     p(99.0000) =    210.545 s/op
     p(99.9000) =    210.545 s/op
     p(99.9900) =    210.545 s/op
     p(99.9990) =    210.545 s/op
     p(99.9999) =    210.545 s/op
    p(100.0000) =    210.545 s/op


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /opt/jdk1.8.0_131/jre/bin/java
# VM options: -Xmx8g
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: grsm.Benchmarks.Multinomial_LR_acc

# Run progress: 86.67% complete, ETA 00:04:28
# Fork: 1 of 1
# Warmup Iteration   1: 

(spark.network.timeout,600s)
(spark.app.name,JMH prof: LogisticRegressionWithLBFGS)
(spark.jars,/home/hsuehku1/Experiments_GRSM/jmh-spark/treeAggregate/.target/tmp-benchmarks.jar)
(spark.master,spark://142.150.237.146:7077)
<failure>

org.apache.spark.SparkException: Task not serializable
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:298)
	at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:288)
	at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:108)
	at org.apache.spark.SparkContext.clean(SparkContext.scala:2094)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:370)
	at org.apache.spark.rdd.RDD$$anonfun$map$1.apply(RDD.scala:369)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)
	at org.apache.spark.rdd.RDD.map(RDD.scala:369)
	at grsm.Benchmarks.Multinomial_LR_acc(driver.scala:97)
	at grsm.generated.Benchmarks_Multinomial_LR_acc_jmhTest.Multinomial_LR_acc_ss_jmhStub(Benchmarks_Multinomial_LR_acc_jmhTest.java:425)
	at grsm.generated.Benchmarks_Multinomial_LR_acc_jmhTest.Multinomial_LR_acc_SingleShotTime(Benchmarks_Multinomial_LR_acc_jmhTest.java:379)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.NotSerializableException: grsm.generated.Benchmarks_My_State_jmhType
Serialization stack:
	- object not serializable (class: grsm.generated.Benchmarks_My_State_jmhType, value: grsm.generated.Benchmarks_My_State_jmhType@3a25bfab)
	- field (class: grsm.Benchmarks$$anonfun$1, name: s$1, type: class grsm.Benchmarks$My_State)
	- object (class grsm.Benchmarks$$anonfun$1, <function1>)
	at org.apache.spark.serializer.SerializationDebugger$.improveException(SerializationDebugger.scala:40)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:46)
	at org.apache.spark.serializer.JavaSerializerInstance.serialize(JavaSerializer.scala:100)
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:295)
	... 24 more




# Run complete. Total time: 00:32:50

Benchmark                  Mode  Cnt    Score    Error  Units
Benchmarks.Binary_LR         ss    5   64.049 Â± 31.573   s/op
Benchmarks.Multinomial_LR    ss    5  208.812 Â±  4.756   s/op
Wed Dec  6 17:50:59 EST 2017
[95m===============================================
Finished Spark LR example.
================================================[97m
Wed Dec  6 17:50:59 EST 2017
Wed Dec  6 17:50:59 EST 2017
[95m===============================================
Done experiment.
================================================[97m
